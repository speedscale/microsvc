name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop, feature/* ]
  pull_request:
    branches: [ master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: banking_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Setup proxymock
      env:
        PROXYMOCK_DEV_API_KEY: ${{ secrets.PROXYMOCK_DEV_API_KEY }}
      run: |
        mkdir -p .speedscale
        curl -Lfs https://downloads.speedscale.com/proxymock/install-proxymock | sh
        echo "$HOME/.speedscale" >> $GITHUB_PATH
        $HOME/.speedscale/proxymock init --api-key "$PROXYMOCK_DEV_API_KEY"
    
    - name: Setup test database
      run: |
        PGPASSWORD=password psql -h localhost -U postgres -d banking_test -c "
          CREATE SCHEMA IF NOT EXISTS user_service;
          CREATE SCHEMA IF NOT EXISTS accounts_service;
          CREATE SCHEMA IF NOT EXISTS transactions_service;
        "
    
    - name: Test Backend Services
      run: |
        # Test each service individually with better error handling
        for service in user-service accounts-service transactions-service api-gateway; do
          echo "=== Testing $service ==="
          cd backend/$service
          if ./mvnw test -Dspring.profiles.active=test; then
            echo "✓ $service tests PASSED"
          else
            echo "✗ $service tests FAILED"
            exit 1
          fi
          cd ../..
        done
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: banking_test
        DB_USERNAME: postgres
        DB_PASSWORD: password
    
    - name: Test Service Makefiles
      run: |
        # Test that each service Makefile works
        for service in user-service accounts-service transactions-service api-gateway; do
          echo "Testing Makefile for $service..."
          cd backend/$service
          make help
          make proxymock-env
          cd ../..
        done

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Test Frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Test Frontend Makefile
      run: |
        cd frontend
        make help
        cd ..

# Proxymock test disabled until required configuration data is available

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: 
          - user-service
          - accounts-service
          - transactions-service
          - api-gateway
          - frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version
      id: version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=raw,value=v${{ steps.version.outputs.version }}-${{ github.sha }}
          type=raw,value=v${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch
          type=ref,event=pr
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || format('./backend/{0}', matrix.service) }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  e2e-test:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/playwright
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps chromium
      if: steps.playwright-cache.outputs.cache-hit != 'true'
    
    - name: Create test results directory
      run: |
        cd frontend
        mkdir -p test-results
    
    - name: Run simplified E2E tests
      run: |
        cd frontend
        npm run test:e2e:ci
      timeout-minutes: 15
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 30