name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: banking_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup proxymock
      env:
        PROXYMOCK_API_KEY: ${{ secrets.PROXYMOCK_API_KEY }}
      run: ./scripts/install-proxymock.sh

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize database schemas
      run: |
        # Wait for postgres to be ready
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done
        
        # Create database schemas for each service
        PGPASSWORD=password psql -h localhost -U postgres -d banking_app -c "
          CREATE SCHEMA IF NOT EXISTS user_service;
          CREATE SCHEMA IF NOT EXISTS accounts_service;
          CREATE SCHEMA IF NOT EXISTS transactions_service;
          
          -- Create users for each service
          CREATE USER user_service_user WITH PASSWORD 'user_service_pass';
          CREATE USER accounts_service_user WITH PASSWORD 'accounts_service_pass';
          CREATE USER transactions_service_user WITH PASSWORD 'transactions_service_pass';
          
          -- Grant permissions
          GRANT ALL ON SCHEMA user_service TO user_service_user;
          GRANT ALL ON SCHEMA accounts_service TO accounts_service_user;
          GRANT ALL ON SCHEMA transactions_service TO transactions_service_user;
          
          GRANT ALL ON ALL TABLES IN SCHEMA user_service TO user_service_user;
          GRANT ALL ON ALL TABLES IN SCHEMA accounts_service TO accounts_service_user;
          GRANT ALL ON ALL TABLES IN SCHEMA transactions_service TO transactions_service_user;
          
          GRANT ALL ON ALL SEQUENCES IN SCHEMA user_service TO user_service_user;
          GRANT ALL ON ALL SEQUENCES IN SCHEMA accounts_service TO accounts_service_user;
          GRANT ALL ON ALL SEQUENCES IN SCHEMA transactions_service TO transactions_service_user;
        "

    - name: Test Backend Services
      run: |
        # Test each service individually
        for service in user-service accounts-service transactions-service api-gateway; do
          echo "Testing $service..."
          cd backend/$service
          ./mvnw test -Dspring.profiles.active=test
          cd ../..
        done
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: banking_app
        DB_USERNAME: postgres
        DB_PASSWORD: password

    - name: Build Backend Services
      run: |
        # Build each service
        for service in user-service accounts-service transactions-service api-gateway; do
          echo "Building $service..."
          cd backend/$service
          ./mvnw clean package -DskipTests
          cd ../..
        done

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Test Frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Test Service Makefiles
      run: |
        # Test that each service Makefile works
        for service in user-service accounts-service transactions-service api-gateway; do
          echo "Testing Makefile for $service..."
          cd backend/$service
          make build
          make test
          cd ../..
        done
        
        # Test frontend Makefile
        cd frontend
        make install
        make test
        cd ..

    - name: Test Proxymock Integration
      run: |
        # Test proxymock commands don't fail (basic validation)
        cd backend/user-service
        
        # Test help command
        make help
        
        # Test proxymock environment setup
        make proxymock-env
        
        echo "Proxymock integration test completed"

    - name: Lint and Security Checks
      run: |
        # Check for security vulnerabilities in frontend
        cd frontend
        npm audit --audit-level moderate
        cd ..
        
        # Check for Maven security issues (if configured)
        for service in user-service accounts-service transactions-service api-gateway; do
          cd backend/$service
          # Add any Maven security plugins here if available
          cd ../..
        done

  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Playwright
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps

    - name: Start Application with Docker Compose
      run: |
        # Start the full application stack
        docker-compose up -d
        
        # Wait for services to be healthy
        timeout 300 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Run E2E Tests
      run: |
        cd frontend
        npm run test:e2e

    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v