apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts-service
  namespace: banking-app
  labels:
    app.kubernetes.io/name: banking-app
    app.kubernetes.io/component: microservice
    app.kubernetes.io/service: accounts-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: accounts-service
      app.kubernetes.io/name: banking-app
      app.kubernetes.io/component: microservice
  template:
    metadata:
      labels:
        app: accounts-service
        app.kubernetes.io/name: banking-app
        app.kubernetes.io/component: microservice
        app.kubernetes.io/service: accounts-service
    spec:
      serviceAccountName: banking-app-sa
      containers:
      - name: accounts-service
        image: ghcr.io/speedscale/microsvc/accounts-service:v1.1.10
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: accounts-service-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: JAVA_OPTS
          value: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom"
        envFrom:
        - configMapRef:
            name: app-config
        - configMapRef:
            name: accounts-service-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 20
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'echo "[accounts-service] Waiting for PostgreSQL..."; until pg_isready -h postgres -p 5432 -q; do sleep 1; done; echo "[accounts-service] PostgreSQL ready!"']