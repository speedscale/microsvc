apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: banking-app
  labels:
    app.kubernetes.io/name: banking-app
    app.kubernetes.io/component: gateway
    app.kubernetes.io/service: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
      app.kubernetes.io/name: banking-app
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app: api-gateway
        app.kubernetes.io/name: banking-app
        app.kubernetes.io/component: gateway
        app.kubernetes.io/service: api-gateway
    spec:
      serviceAccountName: banking-app-sa
      containers:
      - name: api-gateway
        image: ghcr.io/speedscale/microsvc/api-gateway:latest
        imagePullPolicy: Always  # For local minikube testing
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: JAVA_OPTS
          value: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom"
        envFrom:
        - configMapRef:
            name: app-config
        - configMapRef:
            name: api-gateway-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      initContainers:
      - name: wait-for-services
        image: busybox:1.35
        command: ['sh', '-c', 'echo "[api-gateway] Waiting for microservices to be ready..."; while true; do echo "[api-gateway] Checking user-service:8080..."; if nc -z user-service 8080; then echo "[api-gateway] ✓ user-service is ready"; else echo "[api-gateway] ✗ user-service not ready"; sleep 2; continue; fi; echo "[api-gateway] Checking accounts-service:8080..."; if nc -z accounts-service 8080; then echo "[api-gateway] ✓ accounts-service is ready"; else echo "[api-gateway] ✗ accounts-service not ready"; sleep 2; continue; fi; echo "[api-gateway] Checking transactions-service:8080..."; if nc -z transactions-service 8080; then echo "[api-gateway] ✓ transactions-service is ready"; break; else echo "[api-gateway] ✗ transactions-service not ready"; sleep 2; fi; done; echo "[api-gateway] All services are ready!"']