# Shared Spring Boot configuration for Docker environment
# This file should be copied to each service's resources directory

spring:
  main:
    lazy-initialization: true
    banner-mode: off
  
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
      routes:
        - id: user-service
          uri: http://user-service:8080
          predicates:
            - Path=/api/users/**
          filters:
            - StripPrefix=1
        - id: accounts-service
          uri: http://accounts-service:8080
          predicates:
            - Path=/api/accounts/**
          filters:
            - StripPrefix=1
        - id: transactions-service
          uri: http://transactions-service:8080
          predicates:
            - Path=/api/transactions/**
          filters:
            - StripPrefix=1

# Actuator configuration for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when-authorized
    prometheus:
      enabled: false
  metrics:
    export:
      prometheus:
        enabled: false

# Logging configuration - reduced for faster startup
logging:
  level:
    com.banking: INFO
    org.springframework.web: WARN
    org.springframework.cloud.gateway: WARN
    org.springframework.boot.autoconfigure: WARN
    io.opentelemetry: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/banking-app.log

# OpenTelemetry configuration - conditional
otel:
  service:
    name: ${spring.application.name}
  exporter:
    otlp:
      protocol: http/protobuf
      endpoint: http://jaeger:4318
  traces:
    exporter: ${OTEL_TRACES_EXPORTER:otlp}
    sampler:
      type: always_on
  metrics:
    exporter: ${OTEL_METRICS_EXPORTER:otlp}
  logs:
    exporter: ${OTEL_LOGS_EXPORTER:otlp}
  propagation:
    type: w3c